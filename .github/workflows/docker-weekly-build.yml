name: Weekly Docker RISC-V64 Build

on:
  schedule:
    # Run every Sunday at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      moby_ref:
        description: 'Moby ref to build (branch/tag/commit)'
        required: false
        default: 'master'

jobs:
  build-docker:
    runs-on: [self-hosted, riscv64]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-riscv64-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-riscv64-
            ${{ runner.os }}-go-

      - name: Update moby submodule
        run: |
          cd moby
          git fetch origin
          git checkout ${{ github.event.inputs.moby_ref || 'master' }}
          git pull origin ${{ github.event.inputs.moby_ref || 'master' }}
      
      - name: Apply RISC-V patches
        run: |
          cd moby
          # Comment out frozen-images (no riscv64 manifests)
          sed -i '116,123s/^/# /' Dockerfile
          sed -i '123a\RUN mkdir -p /build' Dockerfile
          sed -i '/^COPY.*frozen-images/s/^/# /' Dockerfile
          
          # Comment out dockercli-integration (old CLI)
          sed -i '243,248s/^/# /' Dockerfile
          sed -i '248a\RUN mkdir -p /build' Dockerfile
          sed -i '/^COPY.*dockercli-integration/s/^/# /' Dockerfile
      
      - name: Build Docker development image
        run: |
          cd moby
          docker build \
            --build-arg BASE_DEBIAN_DISTRO=trixie \
            --build-arg GO_VERSION=1.25.3 \
            -f Dockerfile \
            -t docker-riscv64:dev-$(date +%Y%m%d) \
            .
      
      - name: Build Docker binaries
        run: |
          cd moby
          docker build \
            --build-arg BASE_DEBIAN_DISTRO=trixie \
            --build-arg GO_VERSION=1.25.3 \
            --target=binary \
            -f Dockerfile \
            -t docker-riscv64:binary-$(date +%Y%m%d) \
            .

      - name: Build containerd
        run: |
          # Clone containerd if not exists
          if [ ! -d "containerd" ]; then
            git clone --depth 1 --branch v1.7.28 https://github.com/containerd/containerd.git
          fi
          cd containerd

          # Build containerd binaries
          make BUILDTAGS='no_btrfs' binaries

          ls -lh bin/

      - name: Build runc
        run: |
          # Clone runc if not exists
          if [ ! -d "runc" ]; then
            git clone --depth 1 --branch v1.3.0 https://github.com/opencontainers/runc.git
          fi
          cd runc

          # Build runc
          make static

          ls -lh runc

      - name: Extract binaries
        run: |
          DATE=$(date +%Y%m%d)
          mkdir -p release-$DATE

          # Extract Docker binaries from image (binary target places them at root)
          CONTAINER_ID=$(docker create --entrypoint=/bin/true docker-riscv64:binary-$DATE)
          docker cp $CONTAINER_ID:/dockerd release-$DATE/
          docker cp $CONTAINER_ID:/docker-proxy release-$DATE/
          docker rm $CONTAINER_ID

          # Copy containerd binaries
          cp containerd/bin/containerd release-$DATE/
          cp containerd/bin/containerd-shim-runc-v2 release-$DATE/

          # Copy runc binary
          cp runc/runc release-$DATE/

          # Make all binaries executable
          chmod +x release-$DATE/*

          # Get versions
          ./release-$DATE/dockerd --version > release-$DATE/VERSIONS.txt
          ./release-$DATE/docker-proxy --version >> release-$DATE/VERSIONS.txt
          ./release-$DATE/containerd --version >> release-$DATE/VERSIONS.txt
          ./release-$DATE/runc --version >> release-$DATE/VERSIONS.txt

          # Copy documentation
          cp README.md release-$DATE/ || true
          cp RUNNER-SETUP.md release-$DATE/ || true
          cp INSTALL.md release-$DATE/ 2>/dev/null || echo "Note: INSTALL.md not found" > release-$DATE/INSTALL-NEEDED.txt

          ls -lh release-$DATE/
      
      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          DATE=$(date +%Y%m%d)
          MOBY_COMMIT=$(cd moby && git rev-parse --short HEAD)
          MOBY_REF="${{ github.event.inputs.moby_ref || 'master' }}"

          # Determine release version
          # If moby_ref is a version tag (vX.Y.Z), use it; otherwise use date-based
          if [[ "$MOBY_REF" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            # Official release: v27.5.1 -> v27.5.1-riscv64
            RELEASE_VERSION="${MOBY_REF}-riscv64"
            RELEASE_TITLE="Docker ${MOBY_REF} for RISC-V64"
            VERSION_INFO="**Docker Version:** ${MOBY_REF}"
          else
            # Development build: master -> v20251018-dev
            RELEASE_VERSION="v${DATE}-dev"
            RELEASE_TITLE="Docker RISC-V64 Development Build ${DATE}"
            VERSION_INFO="**Moby Branch:** ${MOBY_REF}
          **Moby Commit:** ${MOBY_COMMIT}"
          fi

          cat > release-notes.md << EOF
          Automated build of Docker Engine for RISC-V64

          ${VERSION_INFO}
          **Build Date:** $(date -u +%Y-%m-%d)
          **Architecture:** riscv64

          **Components:**
          - dockerd (Docker Engine)
          - docker-proxy (Network proxy)
          - containerd (Container runtime v1.7.28)
          - runc (OCI runtime v1.3.0)
          - containerd-shim-runc-v2 (Containerd shim)

          **Build Command:**
          \`\`\`bash
          docker build --build-arg BASE_DEBIAN_DISTRO=trixie \\
                       --build-arg GO_VERSION=1.25.3 \\
                       --target=binary \\
                       -f moby/Dockerfile .
          \`\`\`

          **Installation:**
          \`\`\`bash
          # Download all binaries
          for binary in dockerd docker-proxy containerd containerd-shim-runc-v2 runc; do
            wget https://github.com/gounthar/docker-for-riscv64/releases/download/${RELEASE_VERSION}/\$binary
          done

          # Make executable
          chmod +x dockerd docker-proxy containerd containerd-shim-runc-v2 runc

          # Install (requires root)
          sudo install -m 755 dockerd docker-proxy containerd containerd-shim-runc-v2 runc /usr/local/bin/
          \`\`\`

          Automated build on RISC-V64 hardware
          EOF

          # For development builds, delete existing release if it exists
          if [[ "$RELEASE_VERSION" =~ -dev$ ]]; then
            echo "Checking for existing development release..."
            if gh release view "${RELEASE_VERSION}" >/dev/null 2>&1; then
              echo "Deleting existing release ${RELEASE_VERSION}..."
              gh release delete "${RELEASE_VERSION}" --yes
            fi
          fi

          gh release create "${RELEASE_VERSION}" \
            --title "${RELEASE_TITLE}" \
            --notes-file release-notes.md \
            release-$DATE/*
