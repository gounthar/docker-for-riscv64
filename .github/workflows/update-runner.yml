name: Update Self-Hosted Runner

'on':
  workflow_dispatch:
    inputs:
      version:
        description: 'Runner version to update to'
        required: true
        type: string

  # Can be triggered by track-runner-releases.yml
  repository_dispatch:
    types: [runner-update-available]

jobs:
  update-runner:
    runs-on: [self-hosted, riscv64]

    steps:
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version || github.event.client_payload.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z (e.g., v0.12.0)"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check current version
        id: current
        run: |
          # Check version from git tag (more reliable than binary --version)
          cd ~/github-act-runner-test
          CURRENT=$(git describe --tags --exact-match 2>/dev/null || echo "unknown")
          cd - > /dev/null

          echo "current_version=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT"
          echo "Target version: $VERSION"

          if [ "$CURRENT" = "$VERSION" ]; then
            echo "already_updated=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Already running version $VERSION"
          else
            echo "already_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Backup current runner
        if: steps.current.outputs.already_updated == 'false'
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR=~/github-act-runner-backups
          mkdir -p "$BACKUP_DIR"

          if [ -f ~/github-act-runner-test/github-act-runner ]; then
            cp ~/github-act-runner-test/github-act-runner "$BACKUP_DIR/github-act-runner.$TIMESTAMP"
            echo "‚úÖ Backup created: $BACKUP_DIR/github-act-runner.$TIMESTAMP"
          fi

      - name: Pull latest runner code
        if: steps.current.outputs.already_updated == 'false'
        run: |
          cd ~/github-act-runner-test

          # Save current commit for rollback
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "CURRENT_COMMIT=$CURRENT_COMMIT" >> $GITHUB_ENV
          echo "Current commit: $CURRENT_COMMIT"

          # Fetch and checkout target version
          git fetch --tags
          git checkout "$VERSION"

          NEW_COMMIT=$(git rev-parse HEAD)
          echo "NEW_COMMIT=$NEW_COMMIT" >> $GITHUB_ENV
          echo "New commit: $NEW_COMMIT"

      - name: Build new runner
        if: steps.current.outputs.already_updated == 'false'
        id: build
        run: |
          cd ~/github-act-runner-test

          echo "üî® Building github-act-runner $VERSION..."
          if go build -v -o github-act-runner . 2>&1 | tee build.log; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build successful"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build failed"
            exit 1
          fi

      - name: Verify new binary
        if: steps.current.outputs.already_updated == 'false' && steps.build.outputs.build_success == 'true'
        run: |
          cd ~/github-act-runner-test

          # Test the new binary
          if ./github-act-runner --version; then
            # Get version from git tag (reliable) and binary output (for display)
            NEW_VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "unknown")
            BINARY_VERSION=$(./github-act-runner --version 2>&1 | head -1)

            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "‚úÖ New binary version (git tag): $NEW_VERSION"
            echo "‚úÖ Binary reports: $BINARY_VERSION"

            if [ "$NEW_VERSION" != "$VERSION" ]; then
              echo "‚ö†Ô∏è Warning: Git tag ($NEW_VERSION) doesn't match target ($VERSION)"
              echo "This may indicate the checkout didn't work as expected"
            fi
          else
            echo "‚ùå New binary failed version check"
            exit 1
          fi

      - name: Schedule runner restart
        if: steps.current.outputs.already_updated == 'false' && steps.build.outputs.build_success == 'true'
        run: |
          # Create a systemd timer to restart the runner after this job completes
          # This prevents the runner from terminating mid-job

          cat > /tmp/restart-runner.sh << 'EOF'
          #!/bin/bash
          sleep 60  # Wait for job to complete
          sudo systemctl restart github-runner
          EOF

          chmod +x /tmp/restart-runner.sh

          # Run in background, detached from this job
          nohup /tmp/restart-runner.sh > /tmp/runner-restart.log 2>&1 &

          echo "‚úÖ Runner restart scheduled in 60 seconds"
          echo "üìù Check logs: tail -f /tmp/runner-restart.log"

      - name: Report success
        if: steps.current.outputs.already_updated == 'false'
        run: |
          echo "üéâ Runner update complete!"
          echo ""
          echo "üìä Summary:"
          echo "  - Previous version: ${{ steps.current.outputs.current_version }}"
          echo "  - New version: $NEW_VERSION"
          echo "  - Backup location: ~/github-act-runner-backups/github-act-runner.$(date +%Y%m%d_*)"
          echo "  - Restart scheduled: 60 seconds"
          echo ""
          echo "‚ö†Ô∏è The runner service will restart automatically"
          echo "   Current jobs will complete before restart"

      - name: Rollback on failure
        if: failure() && steps.current.outputs.already_updated == 'false'
        run: |
          cd ~/github-act-runner-test

          if [ -n "$CURRENT_COMMIT" ]; then
            echo "üîÑ Rolling back to previous commit: $CURRENT_COMMIT"
            git checkout "$CURRENT_COMMIT"

            # Restore from backup if available
            LATEST_BACKUP=$(ls -t ~/github-act-runner-backups/github-act-runner.* 2>/dev/null | head -1)
            if [ -f "$LATEST_BACKUP" ]; then
              cp "$LATEST_BACKUP" ~/github-act-runner-test/github-act-runner
              echo "‚úÖ Restored from backup: $LATEST_BACKUP"
            fi
          fi

          echo "‚ùå Update failed - rolled back to previous version"
