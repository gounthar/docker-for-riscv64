name: Update APT Repository

on:
  workflow_run:
    workflows: ["Build Debian Package", "Build Docker Compose Debian Package", "Build Docker CLI Debian Package"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag containing the .deb package (v*-riscv64, compose-v*-riscv64, or cli-v*-riscv64)'
        required: true
        default: 'v28.5.1-riscv64'

jobs:
  update-repo:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout apt-repo branch
        uses: actions/checkout@v4
        with:
          ref: apt-repo
          fetch-depth: 0

      - name: Install reprepro
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Get release information
        id: release_info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get release tag from workflow run or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          else
            # Find the latest -riscv64 release (docker, compose, or cli) using JSON output
            RELEASE_TAG=$(gh release list --repo gounthar/docker-for-riscv64 --limit 50 --json tagName | \
                          jq -r '.[] | select(.tagName | test("^(compose-|cli-)?v[0-9]+\\.[0-9]+\\.[0-9]+-riscv64$")) | .tagName' | \
                          head -1)
          fi

          # Determine package type
          if [[ "$RELEASE_TAG" =~ ^compose- ]]; then
            PACKAGE_TYPE="compose"
            echo "package_type=compose" >> $GITHUB_OUTPUT
          elif [[ "$RELEASE_TAG" =~ ^cli- ]]; then
            PACKAGE_TYPE="cli"
            echo "package_type=cli" >> $GITHUB_OUTPUT
          else
            PACKAGE_TYPE="docker"
            echo "package_type=docker" >> $GITHUB_OUTPUT
          fi

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Processing release: $RELEASE_TAG (type: $PACKAGE_TYPE)"

      - name: Download .deb package
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASE_TAG="${{ steps.release_info.outputs.release_tag }}"
          PACKAGE_TYPE="${{ steps.release_info.outputs.package_type }}"

          if [ "$PACKAGE_TYPE" = "compose" ]; then
            echo "Downloading docker-compose-plugin package from $RELEASE_TAG..."
            PATTERN="docker-compose-plugin_*.deb"
          elif [ "$PACKAGE_TYPE" = "cli" ]; then
            echo "Downloading docker-cli package from $RELEASE_TAG..."
            PATTERN="docker-cli_*.deb"
          else
            echo "Downloading docker.io package from $RELEASE_TAG..."
            PATTERN="docker.io_*.deb"
          fi

          # Download all matching .deb files from the release
          gh release download $RELEASE_TAG -p "$PATTERN" --clobber --repo gounthar/docker-for-riscv64 || {
            echo "‚ùå No .deb file found in release $RELEASE_TAG"
            echo "Available assets:"
            gh release view $RELEASE_TAG --repo gounthar/docker-for-riscv64
            exit 1
          }

          ls -lh *.deb

      - name: Import GPG key for signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "Importing GPG key for package signing..."
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import

          # List imported keys
          gpg --list-secret-keys

          echo "GPG key imported successfully"

      - name: Add package to repository
        run: |
          echo "Adding package(s) to APT repository..."

          # Add all .deb packages (reprepro will handle duplicates)
          for deb in *.deb; do
            if [ -f "$deb" ]; then
              echo "Processing: $deb"
              reprepro -b . includedeb trixie "$deb" || {
                echo "‚ö†Ô∏è  Package already in repository or error occurred"
                reprepro -b . list trixie
              }
            fi
          done

          echo ""
          echo "Repository contents:"
          reprepro -b . list trixie

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          RELEASE_TAG="${{ steps.release_info.outputs.release_tag }}"
          PACKAGE_TYPE="${{ steps.release_info.outputs.package_type }}"

          # Extract version from tag
          if [ "$PACKAGE_TYPE" = "compose" ]; then
            VERSION=$(echo $RELEASE_TAG | sed 's/^compose-v//; s/-riscv64$//')
            PACKAGE_NAME="docker-compose-plugin"
            INSTALL_CMD="docker-compose-plugin"
          elif [ "$PACKAGE_TYPE" = "cli" ]; then
            VERSION=$(echo $RELEASE_TAG | sed 's/^cli-v//; s/-riscv64$//')
            PACKAGE_NAME="docker-cli"
            INSTALL_CMD="docker-cli"
          else
            VERSION=$(echo $RELEASE_TAG | sed 's/^v//; s/-riscv64$//')
            PACKAGE_NAME="docker.io"
            INSTALL_CMD="docker.io"
          fi

          # Check if there are changes
          if git diff --quiet dists pool 2>/dev/null; then
            echo "üìù No changes to commit (package may already exist)"
            exit 0
          fi

          git add dists pool
          git commit -m "Add $PACKAGE_NAME $VERSION from release $RELEASE_TAG" \
                     -m "Automated update from GitHub Actions." \
                     -m "Package: ${PACKAGE_NAME}_${VERSION}-*_riscv64.deb" \
                     -m "Release: $RELEASE_TAG" \
                     -m "Workflow: ${{ github.workflow }}" \
                     -m "Run: ${{ github.run_id }}"

          # Push with retry logic for concurrent workflow handling
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin apt-repo; then
              echo "‚úÖ Successfully pushed changes"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è  Push failed (attempt $RETRY_COUNT/$MAX_RETRIES). Pulling and retrying..."

                # Fetch latest changes with error handling
                if ! git fetch origin apt-repo; then
                  echo "‚ùå Failed to fetch from remote. This may indicate network or authentication issues."
                  echo "Skipping remaining retries and failing the workflow."
                  exit 1
                fi

                # Try to rebase our changes on top of remote
                if git rebase origin/apt-repo; then
                  echo "‚úÖ Rebased successfully, retrying push..."
                else
                  echo "‚ö†Ô∏è  Rebase conflict detected. Resolving by accepting remote changes and re-adding package..."
                  git rebase --abort

                  # Reset to remote state
                  git reset --hard origin/apt-repo

                  # Re-add the package (reprepro will handle if it's already there)
                  for deb in *.deb; do
                    if [ -f "$deb" ]; then
                      echo "Re-adding: $deb"
                      if reprepro -b . includedeb trixie "$deb" 2>&1 | tee /tmp/reprepro.log; then
                        echo "‚úÖ Package added successfully"
                      else
                        # Check if error is due to package already existing (exit code 254)
                        if grep -q "already registered with other version" /tmp/reprepro.log; then
                          echo "‚ÑπÔ∏è  Package already in repository with different version - this is expected"
                        else
                          echo "‚ö†Ô∏è  reprepro error occurred:"
                          cat /tmp/reprepro.log
                        fi
                      fi
                    fi
                  done

                  # Commit again if there are changes
                  if ! git diff --quiet dists pool 2>/dev/null; then
                    git add dists pool
                    git commit -m "Add $PACKAGE_NAME $VERSION from release $RELEASE_TAG" \
                               -m "Automated update from GitHub Actions (retry $RETRY_COUNT)." \
                               -m "Package: ${PACKAGE_NAME}_${VERSION}-*_riscv64.deb" \
                               -m "Release: $RELEASE_TAG" \
                               -m "Workflow: ${{ github.workflow }}" \
                               -m "Run: ${{ github.run_id }}"
                  else
                    echo "üìù Package already added by concurrent workflow"
                    exit 0
                  fi
                fi

                # Wait a bit before retrying (random delay to avoid thundering herd)
                sleep $((RANDOM % 10 + 5))
              else
                echo "‚ùå Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

          echo ""
          echo "‚úÖ APT repository updated successfully!"
          echo "üìç Repository URL: https://gounthar.github.io/docker-for-riscv64"
          echo ""
          echo "Users can now install with:"
          echo "  sudo apt-get update"
          echo "  sudo apt-get install $INSTALL_CMD"
